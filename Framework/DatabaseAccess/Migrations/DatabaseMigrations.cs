using BreezeGoodlife.DatabaseAccess.Models;
using Framework.Utility;
using System;
using System.Collections.Generic;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Migrations;
using System.Data.Entity.Migrations.Infrastructure;
using System.Linq;

namespace BreezeGoodlife.DatabaseAccess.Migrations
{
    public class DatabaseMigrations : IDatabaseMigrationsRepository
    {
        public void ApplyDatabaseMigrations()
        {
            //Configuration is the class created by Enable-Migrations
            DbMigrationsConfiguration dbMgConfig = new Configuration()
            {
                //DbContext subclass generated by EF power tools
                ContextType = typeof(BreezeGoodLifeContext)
            };
            using (var databaseContext = new BreezeGoodLifeContext())
            {
                try
                {
                    var database = databaseContext.Database;
                    var isExistsDatabase = database.Exists();

                    var migrationConfiguration = dbMgConfig;

                    migrationConfiguration.TargetDatabase =
                        new DbConnectionInfo(database.Connection.ConnectionString, "System.Data.SqlClient");
                    var migrator = new DbMigrator(migrationConfiguration);

                    // update or create database
                    migrator.Update();

                    // if database is first initial, then initial data for it
                    if (isExistsDatabase)
                    {
                        return;
                    }

                    InitialData(databaseContext);
                }
                catch (AutomaticDataLossException adle)
                {
                    dbMgConfig.AutomaticMigrationDataLossAllowed = true;
                    var mg = new DbMigrator(dbMgConfig);
                    var scriptor = new MigratorScriptingDecorator(mg);
                    string script = scriptor.ScriptUpdate(null, null);
                    throw new Exception(adle.Message + " : " + script);
                }
            }
        }

        private void InitialData(BreezeGoodLifeContext context)
        {
            InitialRoles(context);

            InitialCategories(context);

            context.SaveChanges();

            // Need roles saved to DB
            InitialUsers(context);

            context.SaveChanges();
        }

        private static void InitialRoles(BreezeGoodLifeContext context)
        {
            List<Role> roles = new List<Role>
            {
                new Role
                {
                    Name = "Admin",
                    Description = "Administrator",
                    IsDeleted = false,
                    LastUpdate = DateTimeHelper.GetUtcNowWithoutMillisecond()
                },
                new Role
                {
                    Name = "Manager",
                    Description = "Management Content",
                    IsDeleted = false,
                    LastUpdate = DateTimeHelper.GetUtcNowWithoutMillisecond()
                },
                new Role
                {
                    Name = "Maker",
                    Description = "Audit Coupon and Deal",
                    IsDeleted = false,
                    LastUpdate = DateTimeHelper.GetUtcNowWithoutMillisecond()
                },
                new Role
                {
                    Name = "Checker",
                    Description = "Add/Edit Coupon and Deal",
                    IsDeleted = false,
                    LastUpdate = DateTime.UtcNow
                }
            };

            context.Roles.AddRange(roles);
        }

        private static void InitialCategories(BreezeGoodLifeContext context)
        {
            List<Category> categories = new List<Category>
            {
                new Category
                {
                    Name = "Other",
                    ImageUrl = "Content/Images/Pin_Default@2x.png",
                    Color="#F762CF",
                    PinUrl = "Content/Images/Pin_Default@2x.png",
                    CategoryLocalizes = new List<CategoryLocalize>
                    {
                        new CategoryLocalize
                        {
                            LangName = "vi",
                            Name = "Khác"
                        },
                        new CategoryLocalize
                        {
                            LangName = "en",
                            Name = "Other"
                        },
                    },
                    Order = 1,
                    IsDeleted = false,
                    CreateDate = DateTimeHelper.GetUtcNowWithoutMillisecond(),
                    LastUpdate = DateTimeHelper.GetUtcNowWithoutMillisecond()
                }
            };

            context.Categories.AddRange(categories);
        }

        private static void InitialUsers(BreezeGoodLifeContext context)
        {
            List<User> users = new List<User>
            {
                new User
                {
                    Username = "Admin",
                    Email = "sendmail.test@gmail.com",
                    LastUpdate = DateTimeHelper.GetUtcNowWithoutMillisecond(),
                    IsActive = true,
                    JoinDate = DateTimeHelper.GetUtcNowWithoutMillisecond(),
                    RoleId = context.Roles.FirstOrDefault(x => x.Name == "Admin").Id,
                    Password = "123456".GetMd5Hash(),
                    LastName = "Administrator",
                    FirstName = string.Empty,
                    Token = string.Empty,
                }
            };

            context.Users.AddRange(users);
        }
    }
}